{"version":3,"sources":["logo.svg","faIconLibrary.js","store/action-types/sidenav-action.type.js","store/actions/sidenav-action.js","components/sidenav/sidenav.jsx","components/topbar/topbar.jsx","components/testcase-compact/testcase-compact.jsx","components/step/step.jsx","components/testcase/testcase.jsx","components/content/content.jsx","App.jsx","serviceWorker.js","store/reducers/sidenav.reducer.js","store/reducers/context.reducer.js","store/reducers/index.js","store/index.js","index.js"],"names":["module","exports","__webpack_require__","p","library","add","faUser","faTimes","faBars","faPlus","faThList","faFolderPlus","faFolder","faFolderOpen","faCog","faVial","faPlay","faTrash","faEllipsisH","faPen","ADD_NEW_SIDENAV_FOLDER","REMOVE_SIDENAV_FOLDER","ADD_TEST_CASE","REMOVE_TEST_CASE","FOLDER_ICON_CLICK","RUN_TEST_CASE","RUN_TEST_CASE_COMPLETE","SELECT_FOLDER","SELECT_TEST_CASE","ADD_TEST_CASE_STEP","REMOVE_TEST_CASE_STEP","EDIT_TEST_CASE_STEP","UPDATE_TEST_CASE_STEP","EDIT_FOLDER_NAME","EDIT_TEST_CASE_NAME","SAVE_FOLDER_NAME","SAVE_TEST_CASE_NAME","removeSidenavFolder","payload","type","addTestCase","selectTestCase","Sidenav","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","setState","previousState","isExpanded","state","_this2","react_default","a","createElement","className","react_fontawesome_index_es","icon","onClick","onAddFolderClick","folders","map","folder","key","id","onFolderIconClick","folderId","open","event","preventDefault","onSelectFolder","editable","name","autoFocus","value","onBlur","onSaveFolderName","blur","folderName","target","onChange","onEditFolderName","onAddTestCase","onRemoveFolderClick","testCases","testCase","isRunning","onSelectTestCase","testCaseId","onRemoveTestCase","Component","connect","sidenav","dispatch","editFolderName","saveFolderName","folderIconClick","removeTestCase","selectFolder","Topbar","currentContext","onAddTestCaseStep","onRunTestCase","addTestCaseStep","getState","Promise","resolve","setTimeout","find","objectSpread","response","steps","step","stepId","pass","startTime","Date","now","endTime","image","featureId","runTestCase","TestCaseCompact","length","Step","nameEditable","onUpdateTestCaseStep","delta","features","feature","inputRequired","multiline","data","cols","rows","lastExecutionData","toISOString","src","alt","srcset","updateTestCaseStep","TestCase","onSaveTestCaseName","testCaseName","onEditTestCaseName","components_step_step","history","editTestCaseName","saveTestCaseName","Content","testcase_compact_testcase_compact","testcase_testcase","App","topbar_topbar","sidenav_sidenav","content_content","Boolean","window","location","hostname","match","reducer","arguments","undefined","selected","testcase","action","concat","toConsumableArray","filter","newState","folderIndex","findIndex","testCaseIndex","stepIndex","currentFolder","currentTestCase","description","combineReducers","sidenavReducer","contextReducer","middlewares","thunk","store","createStore","applyMiddleware","apply","configureStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2eaa6339.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport {\r\n  faUser,\r\n  faTimes,\r\n  faBars,\r\n  faPlus,\r\n  faThList,\r\n  faFolderPlus,\r\n  faFolder,\r\n  faFolderOpen,\r\n  faVial,\r\n  faCog,\r\n  faPlay,\r\n  faTrash,\r\n  faEllipsisH,\r\n  faPen\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nlibrary.add(faUser);\r\nlibrary.add(faTimes);\r\nlibrary.add(faBars);\r\nlibrary.add(faPlus);\r\nlibrary.add(faThList);\r\nlibrary.add(faFolderPlus);\r\nlibrary.add(faFolder);\r\nlibrary.add(faFolderOpen);\r\nlibrary.add(faCog);\r\nlibrary.add(faVial);\r\nlibrary.add(faPlay);\r\nlibrary.add(faTrash);\r\nlibrary.add(faEllipsisH);\r\nlibrary.add(faPen);\r\n","export const ADD_NEW_SIDENAV_FOLDER = \"ADD_NEW_SIDENAV_FOLDER\";\r\nexport const REMOVE_SIDENAV_FOLDER = \"REMOVE_SIDENAV_FOLDER\";\r\nexport const ADD_TEST_CASE = \"ADD_TEST_CASE\";\r\nexport const REMOVE_TEST_CASE = \"REMOVE_TEST_CASE\";\r\nexport const FOLDER_ICON_CLICK = \"FOLDER_ICON_CLICK\";\r\nexport const RUN_TEST_CASE = \"RUN_TEST_CASE\";\r\nexport const RUN_TEST_CASE_COMPLETE = \"RUN_TEST_CASE_COMPLETE\";\r\nexport const RUN_ALL_TEST_CASES  = \"RUN_ALL_TEST_CASES\";\r\nexport const SELECT_FOLDER  = \"SELECT_FOLDER\";\r\nexport const SELECT_TEST_CASE  = \"SELECT_TEST_CASE\";\r\nexport const ADD_TEST_CASE_STEP  = \"ADD_TEST_CASE_STEP\";\r\nexport const REMOVE_TEST_CASE_STEP  = \"REMOVE_TEST_CASE_STEP\";\r\nexport const EDIT_TEST_CASE_STEP  = \"EDIT_TEST_CASE_STEP\";\r\nexport const UPDATE_TEST_CASE_STEP  = \"UPDATE_TEST_CASE_STEP\";\r\nexport const EDIT_FOLDER_NAME = \"EDIT_FOLDER_NAME\";\r\nexport const EDIT_TEST_CASE_NAME = \"EDIT_TEST_CASE_NAME\";\r\nexport const EDIT_TEST_CASE_STEP_NAME = \"EDIT_TEST_CASE_NAME\";\r\nexport const SAVE_FOLDER_NAME = \"SAVE_FOLDER_NAME\";\r\nexport const SAVE_TEST_CASE_NAME = \"SAVE_TEST_CASE_NAME\";\r\nexport const SAVE_TEST_CASE_STEP_NAME = \"SAVE_TEST_CASE_NAME\";\r\n\r\n","import {\r\n  ADD_NEW_SIDENAV_FOLDER,\r\n  REMOVE_SIDENAV_FOLDER,\r\n  ADD_TEST_CASE,\r\n  FOLDER_ICON_CLICK,\r\n  REMOVE_TEST_CASE,\r\n  SELECT_FOLDER,\r\n  SELECT_TEST_CASE,\r\n  ADD_TEST_CASE_STEP,\r\n  REMOVE_TEST_CASE_STEP,\r\n  EDIT_TEST_CASE_STEP,\r\n  UPDATE_TEST_CASE_STEP,\r\n  EDIT_TEST_CASE_NAME,\r\n  EDIT_FOLDER_NAME,\r\n  EDIT_TEST_CASE_STEP_NAME,\r\n  SAVE_TEST_CASE_NAME,\r\n  SAVE_FOLDER_NAME,\r\n  SAVE_TEST_CASE_STEP_NAME,\r\n  RUN_TEST_CASE,\r\n  RUN_TEST_CASE_COMPLETE\r\n} from \"../action-types/sidenav-action.type\";\r\n\r\nexport function addNewSidenavFolder(payload) {\r\n  return {\r\n    type: ADD_NEW_SIDENAV_FOLDER,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function removeSidenavFolder(payload) {\r\n  return {\r\n    type: REMOVE_SIDENAV_FOLDER,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function addTestCase(payload) {\r\n  return {\r\n    type: ADD_TEST_CASE,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function folderIconClick(payload) {\r\n  return {\r\n    type: FOLDER_ICON_CLICK,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function removeTestCase(payload) {\r\n  return {\r\n    type: REMOVE_TEST_CASE,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function selectTestCase(payload) {\r\n  return {\r\n    type: SELECT_TEST_CASE,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function selectFolder(payload) {\r\n  return {\r\n    type: SELECT_FOLDER,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function addTestCaseStep(payload) {\r\n  return {\r\n    type: ADD_TEST_CASE_STEP,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function removeTestCaseStep(payload) {\r\n  return {\r\n    type: REMOVE_TEST_CASE_STEP,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function editTestCaseStep(payload) {\r\n  return {\r\n    type: EDIT_TEST_CASE_STEP,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function updateTestCaseStep(payload) {\r\n  return {\r\n    type: UPDATE_TEST_CASE_STEP,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function editTestCaseName(payload) {\r\n  return {\r\n    type: EDIT_TEST_CASE_NAME,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function editFolderName(payload) {\r\n  return {\r\n    type: EDIT_FOLDER_NAME,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function editTestCaseStepName(payload) {\r\n  return {\r\n    type: EDIT_TEST_CASE_STEP_NAME,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function saveTestCaseName(payload) {\r\n  return {\r\n    type: SAVE_TEST_CASE_NAME,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function saveFolderName(payload) {\r\n  return {\r\n    type: SAVE_FOLDER_NAME,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function saveTestCaseStepName(payload) {\r\n  return {\r\n    type: SAVE_TEST_CASE_STEP_NAME,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function runTestCase(payload) {\r\n  return (dispatch, getState) => {\r\n    dispatch({\r\n      type: RUN_TEST_CASE,\r\n      payload\r\n    });\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        const folder = getState().sidenav.folders.find(\r\n          folder => folder.id === payload.folderId\r\n        );\r\n        const testCase = folder.testCases.find(\r\n          testCase => testCase.id === payload.testCaseId\r\n        );\r\n        resolve();\r\n        dispatch({\r\n          type: RUN_TEST_CASE_COMPLETE,\r\n          payload: {\r\n            ...payload,\r\n            response: testCase.steps.map(step => ({\r\n              stepId:step.id,\r\n              pass:true,\r\n              startTime:+Date.now(),\r\n              endTime:+Date.now(),\r\n              image:(step.featureId == 3) && \"/sample.png\"\r\n            }))\r\n          }\r\n        });\r\n      }, 2000);\r\n    });\r\n  };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./sidenav.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  addNewSidenavFolder,\r\n  removeSidenavFolder,\r\n  addTestCase,\r\n  folderIconClick,\r\n  removeTestCase,\r\n  selectFolder,\r\n  selectTestCase,\r\n  editFolderName,\r\n  saveFolderName\r\n} from \"../../store/actions/sidenav-action\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Sidenav extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { isExpanded: false };\r\n  }\r\n  toggle = () => {\r\n    this.setState((previousState, props) => {\r\n      return { isExpanded: !previousState.isExpanded };\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"sidenav-wrapper\">\r\n        {this.state.isExpanded && (\r\n          <FontAwesomeIcon icon=\"times\" onClick={this.toggle} />\r\n        )}\r\n        {!this.state.isExpanded && (\r\n          <FontAwesomeIcon icon=\"bars\" onClick={this.toggle} />\r\n        )}\r\n        {this.state.isExpanded && (\r\n          <div className=\"sidenav-content\">\r\n            <div className=\"sidenav-primary-toolbar\">\r\n              <FontAwesomeIcon\r\n                onClick={this.props.onAddFolderClick}\r\n                icon=\"folder-plus\"\r\n              />\r\n              <FontAwesomeIcon icon=\"th-list\" />\r\n            </div>\r\n            <div className=\"sidenav-folders\">\r\n              {this.props.folders.map(folder => {\r\n                return (\r\n                  <div className=\"sidenav-folder-wrapper\" key={folder.id}>\r\n                    <div className=\"folder-header\">\r\n                      <div\r\n                        onClick={() =>\r\n                          this.props.onFolderIconClick({ folderId: folder.id })\r\n                        }\r\n                      >\r\n                        {folder.open && <FontAwesomeIcon icon=\"folder-open\" />}\r\n                        {!folder.open && <FontAwesomeIcon icon=\"folder\" />}\r\n                      </div>\r\n                      <span\r\n                        className=\"folder-name\"\r\n                        onClick={event => {\r\n                          event.preventDefault();\r\n                          this.props.onSelectFolder({ folderId: folder.id });\r\n                        }}\r\n                      >\r\n                        {\" \"}\r\n                        {!folder.editable && folder.name}\r\n                        {folder.editable && (\r\n                          <input\r\n                            type=\"text\"\r\n                            autoFocus=\"true\"\r\n                            value={folder.name}\r\n                            onClick={event => {\r\n                              event.preventDefault();\r\n                            }}\r\n                            onBlur={event => {\r\n                              event.preventDefault();\r\n                              this.props.onSaveFolderName({\r\n                                folderId: folder.id,\r\n                                blur: true,\r\n                                folderName: event.target.value\r\n                              });\r\n                            }}\r\n                            onChange={event => {\r\n                              event.preventDefault();\r\n                              this.props.onSaveFolderName({\r\n                                folderId: folder.id,\r\n                                folderName: event.target.value\r\n                              });\r\n                            }}\r\n                          />\r\n                        )}\r\n                        {!folder.editable && (\r\n                          <FontAwesomeIcon\r\n                            icon=\"pen\"\r\n                            onClick={() =>\r\n                              this.props.onEditFolderName({\r\n                                folderId: folder.id\r\n                              })\r\n                            }\r\n                          />\r\n                        )}\r\n                      </span>\r\n                      <div className=\"folder-options-wrapper\">\r\n                        <FontAwesomeIcon icon=\"ellipsis-h\" />\r\n                        <div className=\"folder-options\">\r\n                          <div\r\n                            onClick={() =>\r\n                              this.props.onAddTestCase({ folderId: folder.id })\r\n                            }\r\n                          >\r\n                            <FontAwesomeIcon icon=\"plus\" />\r\n                          </div>\r\n                          <div\r\n                            onClick={() =>\r\n                              this.props.onRemoveFolderClick({\r\n                                folderId: folder.id\r\n                              })\r\n                            }\r\n                          >\r\n                            <FontAwesomeIcon icon=\"trash\" />\r\n                          </div>\r\n                          <div>\r\n                            <FontAwesomeIcon icon=\"play\" />\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"folder-content\">\r\n                      {folder.open &&\r\n                        folder.testCases.map(testCase => {\r\n                          return (\r\n                            <div className=\"test-case\">\r\n                              <FontAwesomeIcon icon=\"vial\" />\r\n                              {testCase.isRunning && <div className=\"loading\" />}\r\n                              <span\r\n                                className={\r\n                                  testCase.isRunning\r\n                                    ? \"test-case-name running\"\r\n                                    : \"test-case-name\"\r\n                                }\r\n                                onClick={() =>\r\n                                  this.props.onSelectTestCase({\r\n                                    folderId: folder.id,\r\n                                    testCaseId: testCase.id\r\n                                  })\r\n                                }\r\n                              >\r\n                                {testCase.name}\r\n                              </span>\r\n                              <div className=\"test-case-options-wrapper\">\r\n                                <FontAwesomeIcon icon=\"ellipsis-h\" />\r\n                                <div className=\"test-case-options\">\r\n                                  <div\r\n                                    onClick={() =>\r\n                                      this.props.onRemoveTestCase({\r\n                                        folderId: folder.id,\r\n                                        testCaseId: testCase.id\r\n                                      })\r\n                                    }\r\n                                  >\r\n                                    <FontAwesomeIcon icon=\"trash\" />\r\n                                  </div>\r\n                                  <div>\r\n                                    <FontAwesomeIcon icon=\"play\" />\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          );\r\n                        })}\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onAddFolderClick: () => {\r\n      dispatch(addNewSidenavFolder());\r\n    },\r\n    onRemoveFolderClick: payload => {\r\n      dispatch(removeSidenavFolder(payload));\r\n    },\r\n    onEditFolderName: payload => {\r\n      dispatch(editFolderName(payload));\r\n    },\r\n    onSaveFolderName: payload => {\r\n      dispatch(saveFolderName(payload));\r\n    },\r\n    onAddTestCase: payload => {\r\n      dispatch(addTestCase(payload));\r\n    },\r\n    onFolderIconClick: payload => {\r\n      dispatch(folderIconClick(payload));\r\n    },\r\n    onRemoveTestCase: payload => {\r\n      dispatch(removeTestCase(payload));\r\n    },\r\n    onSelectFolder: payload => {\r\n      dispatch(selectFolder(payload));\r\n    },\r\n    onSelectTestCase: payload => {\r\n      dispatch(selectTestCase(payload));\r\n    }\r\n  };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    folders: state.sidenav.folders\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Sidenav);\r\n","import React, { Component } from \"react\";\r\nimport \"./topbar.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  removeSidenavFolder,\r\n  addTestCase,\r\n  removeTestCase,\r\n  runTestCase,\r\n  addTestCaseStep\r\n} from \"../../store/actions/sidenav-action\";\r\n\r\nclass Topbar extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"top-bar-wrapper\">\r\n        <div className=\"menu\" />\r\n        <div className=\"current-selection\">\r\n          {this.props.currentContext.type === \"folder\" && (\r\n            <FontAwesomeIcon icon=\"folder\" />\r\n          )}\r\n          {this.props.currentContext.type === \"testcase\" && (\r\n            <FontAwesomeIcon icon=\"vial\" />\r\n          )}\r\n          <span>{this.props.currentContext.name}</span>\r\n        </div>\r\n        <div className=\"tools\">\r\n          {this.props.currentContext.type === \"folder\" && (\r\n            <div className=\"tools-options-container\">\r\n              <div\r\n                onClick={() =>\r\n                  this.props.onAddTestCase({\r\n                    folderId: this.props.currentContext.folder.id\r\n                  })\r\n                }\r\n              >\r\n                <FontAwesomeIcon icon=\"plus\" />\r\n              </div>\r\n              <div\r\n                onClick={() =>\r\n                  this.props.onRemoveFolderClick({\r\n                    folderId: this.props.currentContext.folder.id\r\n                  })\r\n                }\r\n              >\r\n                <FontAwesomeIcon icon=\"trash\" />\r\n              </div>\r\n              <div>\r\n                <FontAwesomeIcon icon=\"play\" />\r\n              </div>\r\n            </div>\r\n          )}\r\n          {this.props.currentContext.type === \"testcase\" && (\r\n            <div className=\"tools-options-container\">\r\n              <div\r\n                onClick={() =>\r\n                  this.props.onAddTestCaseStep({\r\n                    folderId: this.props.currentContext.folder.id,\r\n                    testCaseId: this.props.currentContext.testCase.id\r\n                  })\r\n                }\r\n              >\r\n                <FontAwesomeIcon icon=\"plus\" />\r\n              </div>\r\n              <div\r\n                onClick={() =>\r\n                  this.props.onRunTestCase({\r\n                    folderId: this.props.currentContext.folder.id,\r\n                    testCaseId: this.props.currentContext.testCase.id\r\n                  })\r\n                }\r\n              >\r\n                <FontAwesomeIcon icon=\"play\" />\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className=\"user-info\">\r\n          <FontAwesomeIcon icon=\"user\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onRemoveFolderClick: payload => {\r\n      dispatch(removeSidenavFolder(payload));\r\n    },\r\n    onAddTestCase: payload => {\r\n      dispatch(addTestCase(payload));\r\n    },\r\n    onAddTestCaseStep: payload => {\r\n      dispatch(addTestCaseStep(payload));\r\n    },\r\n    onRunTestCase: payload => {\r\n      dispatch(runTestCase(payload));\r\n    }\r\n  };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    currentContext: state.sidenav.currentContext\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Topbar);\r\n","import React, { Component } from \"react\";\r\nimport \"./testcase-compact.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { selectTestCase } from \"../../store/actions/sidenav-action\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass TestCaseCompact extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"test-case-compact-wrapper\">\r\n        <div className=\"test-case-compact-header\">\r\n          <span\r\n            className=\"test-case-name\"\r\n            onClick={() =>\r\n              this.props.onSelectTestCase({\r\n                folderId: this.props.folderId,\r\n                testCaseId: this.props.testCase.id\r\n              })\r\n            }\r\n          >\r\n            {this.props.testCase.name}\r\n          </span>\r\n        </div>\r\n        <div className=\"test-case-compact-steps\">\r\n          {!this.props.testCase.steps.length && (\r\n            <span> No Step Added Yet </span>\r\n          )}\r\n        </div>\r\n        <div className=\"test-case-compact-historical\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSelectTestCase: payload => {\r\n      dispatch(selectTestCase(payload));\r\n    }\r\n  };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {};\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TestCaseCompact);\r\n","import React, { Component } from \"react\";\r\nimport \"./step.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { connect } from \"react-redux\";\r\nimport { updateTestCaseStep } from \"../../store/actions/sidenav-action\";\r\n\r\nclass Step extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"step-wrapper\">\r\n        <div className=\"step-header\">\r\n          {!this.props.step.nameEditable && this.props.step.name}\r\n          {this.props.step.nameEditable && (\r\n            <input\r\n              type=\"text\"\r\n              autoFocus=\"true\"\r\n              value={this.props.step.name}\r\n              onClick={event => {\r\n                event.preventDefault();\r\n              }}\r\n              onBlur={event => {\r\n                event.preventDefault();\r\n                this.props.onUpdateTestCaseStep({\r\n                  folderId: this.props.folderId,\r\n                  testCaseId: this.props.testCaseId,\r\n                  stepId: this.props.step.id,\r\n                  delta: {\r\n                    name: event.target.value,\r\n                    nameEditable: false\r\n                  }\r\n                });\r\n              }}\r\n              onChange={event => {\r\n                event.preventDefault();\r\n                this.props.onUpdateTestCaseStep({\r\n                  folderId: this.props.folderId,\r\n                  testCaseId: this.props.testCaseId,\r\n                  stepId: this.props.step.id,\r\n                  delta: {\r\n                    name: event.target.value\r\n                  }\r\n                });\r\n              }}\r\n            />\r\n          )}\r\n          {!this.props.step.nameEditable && (\r\n            <FontAwesomeIcon\r\n              icon=\"pen\"\r\n              onClick={event => {\r\n                this.props.onUpdateTestCaseStep({\r\n                  folderId: this.props.folderId,\r\n                  testCaseId: this.props.testCaseId,\r\n                  stepId: this.props.step.id,\r\n                  delta: {\r\n                    nameEditable: true\r\n                  }\r\n                });\r\n              }}\r\n            />\r\n          )}\r\n        </div>\r\n        <div className=\"step-container\">\r\n          <div className=\"step-data-wrapper\">\r\n            <div className=\"step-type\">\r\n              <div className=\"step-type-options  blue semi-square\">\r\n                <select\r\n                  name=\"step-type-options\"\r\n                  onChange={event =>\r\n                    this.props.onUpdateTestCaseStep({\r\n                      folderId: this.props.folderId,\r\n                      testCaseId: this.props.testCaseId,\r\n                      stepId: this.props.step.id,\r\n                      delta: {\r\n                        featureId: event.target.value\r\n                      }\r\n                    })\r\n                  }\r\n                  value={this.props.step.featureId}\r\n                >\r\n                  {this.props.features.map(feature => {\r\n                    return <option value={feature.id}>{feature.name}</option>;\r\n                  })}\r\n                </select>\r\n              </div>\r\n            </div>\r\n            <div className=\"step-data\">\r\n              {this.props.features.find(\r\n                feature => feature.id == this.props.step.featureId\r\n              ).inputRequired &&\r\n                !this.props.features.find(\r\n                  feature => feature.id == this.props.step.featureId\r\n                ).multiline && (\r\n                  <input\r\n                    type=\"text\"\r\n                    value={this.props.step.data}\r\n                    onChange={event =>\r\n                      this.props.onUpdateTestCaseStep({\r\n                        folderId: this.props.folderId,\r\n                        testCaseId: this.props.testCaseId,\r\n                        stepId: this.props.step.id,\r\n                        delta: {\r\n                          data: event.target.value\r\n                        }\r\n                      })\r\n                    }\r\n                  />\r\n                )}\r\n              {this.props.features.find(\r\n                feature => feature.id == this.props.step.featureId\r\n              ).inputRequired &&\r\n                this.props.features.find(\r\n                  feature => feature.id == this.props.step.featureId\r\n                ).multiline && (\r\n                  <textarea\r\n                    cols=\"50\"\r\n                    rows=\"20\"\r\n                    value={this.props.step.data}\r\n                    onChange={event =>\r\n                      this.props.onUpdateTestCaseStep({\r\n                        folderId: this.props.folderId,\r\n                        testCaseId: this.props.testCaseId,\r\n                        stepId: this.props.step.id,\r\n                        delta: {\r\n                          data: event.target.value\r\n                        }\r\n                      })\r\n                    }\r\n                  />\r\n                )}\r\n            </div>\r\n          </div>\r\n          <div className=\"step-reponse-wrapper\">\r\n            {this.props.lastExecutionData && (\r\n              <div className=\"response-row-wrapper\">\r\n                <div className=\"response-row\">\r\n                  <span className=\"label\">Status</span>\r\n                  <span\r\n                    className={\r\n                      this.props.lastExecutionData.pass\r\n                        ? \"data Pass\"\r\n                        : \"data Fail\"\r\n                    }\r\n                  >\r\n                    {this.props.lastExecutionData.pass ? \"Pass\" : \"Fail\"}\r\n                  </span>\r\n                </div>\r\n                <div className=\"response-row\">\r\n                  <span className=\"label\">Start Time</span>\r\n                  <span className=\"data\">\r\n                    {new Date(\r\n                      this.props.lastExecutionData.startTime\r\n                    ).toISOString()}\r\n                  </span>\r\n                </div>\r\n                <div className=\"response-row\">\r\n                  <span className=\"label\">End Time</span>\r\n                  <span className=\"data\">\r\n                    {new Date(\r\n                      this.props.lastExecutionData.endTime\r\n                    ).toISOString()}\r\n                  </span>\r\n                </div>\r\n                {this.props.lastExecutionData.image && (\r\n                  <div className=\"response-row-image\">\r\n                    <span className=\"label\">ScreenShot</span>\r\n                    <div className=\"image-wrapper\">\r\n                      <img\r\n                        src={this.props.lastExecutionData.image}\r\n                        alt=\"\"\r\n                        srcset=\"\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onUpdateTestCaseStep: payload => dispatch(updateTestCaseStep(payload))\r\n  };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    features: state.features.features\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Step);\r\n","import React, { Component } from \"react\";\r\nimport \"./testcase.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  selectTestCase,\r\n  editTestCaseName,\r\n  saveTestCaseName\r\n} from \"../../store/actions/sidenav-action\";\r\nimport { connect } from \"react-redux\";\r\nimport Step from \"../step/step\";\r\n\r\nclass TestCase extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"test-case-wrapper\">\r\n        <div className=\"test-case-header\">\r\n          {!this.props.testCase.nameEditable && this.props.testCase.name}\r\n          {this.props.testCase.nameEditable && (\r\n            <input\r\n              type=\"text\"\r\n              autoFocus=\"true\"\r\n              value={this.props.testCase.name}\r\n              onClick={event => {\r\n                event.preventDefault();\r\n              }}\r\n              onBlur={event => {\r\n                event.preventDefault();\r\n                this.props.onSaveTestCaseName({\r\n                  folderId: this.props.folderId,\r\n                  testCaseId: this.props.testCase.id,\r\n                  blur: true,\r\n                  testCaseName: event.target.value\r\n                });\r\n              }}\r\n              onChange={event => {\r\n                event.preventDefault();\r\n                this.props.onSaveTestCaseName({\r\n                  folderId: this.props.folderId,\r\n                  testCaseId: this.props.testCase.id,\r\n                  testCaseName: event.target.value\r\n                });\r\n              }}\r\n            />\r\n          )}\r\n          {!this.props.testCase.nameEditable && (\r\n            <FontAwesomeIcon\r\n              icon=\"pen\"\r\n              onClick={() =>\r\n                this.props.onEditTestCaseName({\r\n                  folderId: this.props.folderId,\r\n                  testCaseId: this.props.testCase.id\r\n                })\r\n              }\r\n            />\r\n          )}\r\n        </div>\r\n        <div className=\"test-case-steps\">\r\n          {this.props.testCase.steps.map(step => {\r\n            return (\r\n              <div key={step.id}>\r\n                <Step                  \r\n                  step={step}\r\n                  folderId={this.props.folderId}\r\n                  testCaseId={this.props.testCase.id}\r\n                  lastExecutionData={\r\n                    this.props.testCase.history[0] &&\r\n                    this.props.testCase.history[0].find(\r\n                      data => data.stepId == step.id\r\n                    )\r\n                  }\r\n                />\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSelectTestCase: payload => {\r\n      dispatch(selectTestCase(payload));\r\n    },\r\n    onEditTestCaseName: payload => {\r\n      dispatch(editTestCaseName(payload));\r\n    },\r\n    onSaveTestCaseName: payload => {\r\n      dispatch(saveTestCaseName(payload));\r\n    }\r\n  };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {};\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TestCase);\r\n","import React, { Component } from \"react\";\r\nimport \"./content.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {} from \"../../store/actions/sidenav-action\";\r\nimport { connect } from \"react-redux\";\r\nimport TestCaseCompact from \"../testcase-compact/testcase-compact\";\r\nimport TestCase from \"../testcase/testcase\";\r\n\r\nclass Content extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App-content\">\r\n        {this.props.currentContext.type === \"folder\" &&\r\n          this.props.currentContext.folder.testCases.map(testCase => {\r\n            return (\r\n              <TestCaseCompact\r\n                folderId={this.props.currentContext.folder.id}\r\n                testCase={testCase}\r\n                key={testCase.id}\r\n              />\r\n            );\r\n          })}\r\n        {this.props.currentContext.type === \"testcase\" && (\r\n          <TestCase\r\n            folderId={this.props.currentContext.folder.id}\r\n            testCase={this.props.currentContext.testCase}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n  return {};\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    currentContext: state.sidenav.currentContext\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Content);\r\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Sidenav from \"./components/sidenav/sidenav\";\nimport Topbar from \"./components/topbar/topbar\";\nimport Content from \"./components/content/content\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Topbar />\n        <Sidenav />\n        <Content />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n  ADD_NEW_SIDENAV_FOLDER,\r\n  REMOVE_SIDENAV_FOLDER,\r\n  ADD_TEST_CASE,\r\n  FOLDER_ICON_CLICK,\r\n  REMOVE_TEST_CASE,\r\n  SELECT_TEST_CASE,\r\n  SELECT_FOLDER,\r\n  ADD_TEST_CASE_STEP,\r\n  REMOVE_TEST_CASE_STEP,\r\n  EDIT_TEST_CASE_STEP,\r\n  UPDATE_TEST_CASE_STEP,\r\n  EDIT_FOLDER_NAME,\r\n  SAVE_FOLDER_NAME,\r\n  EDIT_TEST_CASE_NAME,\r\n  SAVE_TEST_CASE_NAME,\r\n  RUN_TEST_CASE,\r\n  RUN_TEST_CASE_COMPLETE\r\n} from \"../action-types/sidenav-action.type\";\r\n\r\nfunction reducer(\r\n  state = {\r\n    folders: [],\r\n    selected: {},\r\n    currentContext: {\r\n      type: \"none\",\r\n      name: \"\",\r\n      folder: {},\r\n      testcase: null\r\n    }\r\n  },\r\n  action\r\n) {\r\n  switch (action.type) {\r\n    case ADD_NEW_SIDENAV_FOLDER:\r\n      return {\r\n        ...state,\r\n        folders: state.folders.concat({\r\n          id: `__folder_${state.folders.length + 1}`,\r\n          name: `Folder ${state.folders.length + 1}`,\r\n          open: false,\r\n          testCases: []\r\n        })\r\n      };\r\n    case REMOVE_SIDENAV_FOLDER:\r\n      return {\r\n        ...state,\r\n        folders: [\r\n          ...state.folders.filter(\r\n            folder => folder.id !== action.payload.folderId\r\n          )\r\n        ]\r\n      };\r\n    case EDIT_FOLDER_NAME: {\r\n      return {\r\n        ...state,\r\n        folders: state.folders.map(folder => {\r\n          if (folder.id === action.payload.folderId) {\r\n            folder.editable = true;\r\n          }\r\n          return folder;\r\n        })\r\n      };\r\n    }\r\n    case SAVE_FOLDER_NAME: {\r\n      return {\r\n        ...state,\r\n        folders: state.folders.map(folder => {\r\n          if (folder.id === action.payload.folderId) {\r\n            folder.editable = !action.payload.blur;\r\n            folder.name = action.payload.folderName;\r\n          }\r\n          return folder;\r\n        })\r\n      };\r\n    }\r\n    case ADD_TEST_CASE: {\r\n      let newState = {\r\n        ...state,\r\n        folders: state.folders.map(folder => {\r\n          if (folder.id === action.payload.folderId) {\r\n            folder.testCases = folder.testCases.concat({\r\n              id: `${folder.id}_testcase_${folder.testCases.length + 1}`,\r\n              name: `Test Case ${folder.testCases.length + 1}`,\r\n              steps: [],\r\n              history: []\r\n            });\r\n            folder.open = true;\r\n          }\r\n          return folder;\r\n        })\r\n      };\r\n      if (state.currentContext.folder.id === action.payload.folderId) {\r\n        newState = {\r\n          ...newState,\r\n          currentContext: {\r\n            ...newState.currentContext,\r\n            folder: {\r\n              ...newState.folders.find(\r\n                folder => folder.id === action.payload.folderId\r\n              )\r\n            }\r\n          }\r\n        };\r\n      }\r\n      return newState;\r\n    }\r\n    case ADD_TEST_CASE_STEP: {\r\n      const folderIndex = state.folders.findIndex(\r\n        folder => folder.id === action.payload.folderId\r\n      );\r\n      const testCaseIndex = state.folders[folderIndex].testCases.findIndex(\r\n        testCase => testCase.id === action.payload.testCaseId\r\n      );\r\n      state.folders[folderIndex].testCases[testCaseIndex].steps = [\r\n        ...state.folders[folderIndex].testCases[testCaseIndex].steps,\r\n        {\r\n          id: `${state.folders[folderIndex].id}_testcase_${\r\n            state.folders[folderIndex].testCases[testCaseIndex].id\r\n          }_step_${state.folders[folderIndex].testCases[testCaseIndex].steps\r\n            .length + 1}`,\r\n          name: `Step ${state.folders[folderIndex].testCases[testCaseIndex]\r\n            .steps.length + 1}`,\r\n          featureId: 1,\r\n          data: \"\"\r\n        }\r\n      ];\r\n      state.folders[folderIndex].testCases = [\r\n        ...state.folders[folderIndex].testCases\r\n      ];\r\n      return {\r\n        ...state,\r\n        folders: [...state.folders],\r\n        currentContext: {\r\n          ...state.currentContext,\r\n          testCase: {\r\n            ...state.folders[folderIndex].testCases[testCaseIndex]\r\n          }\r\n        }\r\n      };\r\n    }\r\n    case EDIT_TEST_CASE_NAME: {\r\n      const folderIndex = state.folders.findIndex(\r\n        folder => folder.id === action.payload.folderId\r\n      );\r\n      const testCaseIndex = state.folders[folderIndex].testCases.findIndex(\r\n        testCase => testCase.id === action.payload.testCaseId\r\n      );\r\n      state.folders[folderIndex].testCases[testCaseIndex] = {\r\n        ...state.folders[folderIndex].testCases[testCaseIndex],\r\n        nameEditable: true\r\n      };\r\n      state.folders[folderIndex].testCases = [\r\n        ...state.folders[folderIndex].testCases\r\n      ];\r\n      return {\r\n        ...state,\r\n        folders: [...state.folders],\r\n        currentContext: {\r\n          ...state.currentContext,\r\n          testCase: {\r\n            ...state.folders[folderIndex].testCases[testCaseIndex]\r\n          }\r\n        }\r\n      };\r\n    }\r\n    case SAVE_TEST_CASE_NAME: {\r\n      const folderIndex = state.folders.findIndex(\r\n        folder => folder.id === action.payload.folderId\r\n      );\r\n      const testCaseIndex = state.folders[folderIndex].testCases.findIndex(\r\n        testCase => testCase.id === action.payload.testCaseId\r\n      );\r\n      state.folders[folderIndex].testCases[testCaseIndex] = {\r\n        ...state.folders[folderIndex].testCases[testCaseIndex],\r\n        nameEditable: !action.payload.blur,\r\n        name: action.payload.testCaseName\r\n      };\r\n      state.folders[folderIndex].testCases = [\r\n        ...state.folders[folderIndex].testCases\r\n      ];\r\n      return {\r\n        ...state,\r\n        folders: [...state.folders],\r\n        currentContext: {\r\n          ...state.currentContext,\r\n          testCase: {\r\n            ...state.folders[folderIndex].testCases[testCaseIndex]\r\n          },\r\n          name: `${state.folders[folderIndex].name}/${\r\n            state.folders[folderIndex].testCases[testCaseIndex].name\r\n          }`\r\n        }\r\n      };\r\n    }\r\n    case RUN_TEST_CASE: {\r\n      const folderIndex = state.folders.findIndex(\r\n        folder => folder.id === action.payload.folderId\r\n      );\r\n      const testCaseIndex = state.folders[folderIndex].testCases.findIndex(\r\n        testCase => testCase.id === action.payload.testCaseId\r\n      );\r\n      state.folders[folderIndex].testCases[testCaseIndex] = {\r\n        ...state.folders[folderIndex].testCases[testCaseIndex],\r\n        isRunning: true\r\n      };\r\n      state.folders[folderIndex].testCases = [\r\n        ...state.folders[folderIndex].testCases\r\n      ];\r\n      return {\r\n        ...state,\r\n        folders: [...state.folders],\r\n        currentContext: {\r\n          ...state.currentContext,\r\n          testCase: {\r\n            ...state.folders[folderIndex].testCases[testCaseIndex]\r\n          }\r\n        }\r\n      };\r\n    }\r\n    case RUN_TEST_CASE_COMPLETE: {\r\n      const folderIndex = state.folders.findIndex(\r\n        folder => folder.id === action.payload.folderId\r\n      );\r\n      const testCaseIndex = state.folders[folderIndex].testCases.findIndex(\r\n        testCase => testCase.id === action.payload.testCaseId\r\n      );\r\n      state.folders[folderIndex].testCases[testCaseIndex] = {\r\n        ...state.folders[folderIndex].testCases[testCaseIndex],\r\n        isRunning: false,\r\n        // history: state.folders[folderIndex].testCases[testCaseIndex].history.concat([action.payload.response])\r\n        history: [\r\n          action.payload.response,\r\n          ...state.folders[folderIndex].testCases[testCaseIndex].history\r\n        ]\r\n      };\r\n      state.folders[folderIndex].testCases = [\r\n        ...state.folders[folderIndex].testCases\r\n      ];\r\n      return {\r\n        ...state,\r\n        folders: [...state.folders],\r\n        currentContext: {\r\n          ...state.currentContext,\r\n          testCase: {\r\n            ...state.folders[folderIndex].testCases[testCaseIndex]\r\n          }\r\n        }\r\n      };\r\n    }\r\n    case RUN_TEST_CASE_COMPLETE: {\r\n      const folderIndex = state.folders.findIndex(\r\n        folder => folder.id === action.payload.folderId\r\n      );\r\n      const testCaseIndex = state.folders[folderIndex].testCases.findIndex(\r\n        testCase => testCase.id === action.payload.testCaseId\r\n      );\r\n      state.folders[folderIndex].testCases[testCaseIndex] = {\r\n        ...state.folders[folderIndex].testCases[testCaseIndex],\r\n        isRunning: false\r\n      };\r\n      state.folders[folderIndex].testCases = [\r\n        ...state.folders[folderIndex].testCases\r\n      ];\r\n      return {\r\n        ...state,\r\n        folders: [...state.folders],\r\n        currentContext: {\r\n          ...state.currentContext,\r\n          testCase: {\r\n            ...state.folders[folderIndex].testCases[testCaseIndex]\r\n          }\r\n        }\r\n      };\r\n    }\r\n    case UPDATE_TEST_CASE_STEP: {\r\n      const folderIndex = state.folders.findIndex(\r\n        folder => folder.id === action.payload.folderId\r\n      );\r\n      const testCaseIndex = state.folders[folderIndex].testCases.findIndex(\r\n        testCase => testCase.id === action.payload.testCaseId\r\n      );\r\n      const stepIndex = state.folders[folderIndex].testCases[\r\n        testCaseIndex\r\n      ].steps.findIndex(step => step.id === action.payload.stepId);\r\n      state.folders[folderIndex].testCases[testCaseIndex].steps[stepIndex] = {\r\n        ...state.folders[folderIndex].testCases[testCaseIndex].steps[stepIndex],\r\n        ...action.payload.delta\r\n      };\r\n\r\n      state.folders[folderIndex].testCases = [\r\n        ...state.folders[folderIndex].testCases\r\n      ];\r\n      state.folders[folderIndex].testCases[testCaseIndex].steps = [\r\n        ...state.folders[folderIndex].testCases[testCaseIndex].steps\r\n      ];\r\n      state.folders[folderIndex].testCases = [\r\n        ...state.folders[folderIndex].testCases\r\n      ];\r\n      return {\r\n        ...state,\r\n        folders: [...state.folders],\r\n        currentContext: {\r\n          ...state.currentContext,\r\n          testCase: {\r\n            ...state.folders[folderIndex].testCases[testCaseIndex]\r\n          }\r\n        }\r\n      };\r\n    }\r\n    case REMOVE_TEST_CASE_STEP: {\r\n      return state;\r\n    }\r\n    case EDIT_TEST_CASE_STEP: {\r\n      return state;\r\n    }\r\n    case FOLDER_ICON_CLICK: {\r\n      return {\r\n        ...state,\r\n        folders: state.folders.map(folder => {\r\n          if (folder.id === action.payload.folderId) {\r\n            folder.open = !folder.open;\r\n          }\r\n          return folder;\r\n        })\r\n      };\r\n    }\r\n    case REMOVE_TEST_CASE: {\r\n      let newState = {\r\n        ...state,\r\n        folders: state.folders.map(folder => {\r\n          if (folder.id === action.payload.folderId) {\r\n            folder.testCases = folder.testCases.filter(\r\n              testCase => testCase.id !== action.payload.testCaseId\r\n            );\r\n          }\r\n          return folder;\r\n        })\r\n      };\r\n      if (state.currentContext.folder.id === action.payload.folderId) {\r\n        newState = {\r\n          ...newState,\r\n          currentContext: {\r\n            ...newState.currentContext,\r\n            folder: {\r\n              ...newState.folders.find(\r\n                folder => folder.id === action.payload.folderId\r\n              )\r\n            }\r\n          }\r\n        };\r\n      }\r\n      return newState;\r\n    }\r\n    case SELECT_TEST_CASE: {\r\n      const currentFolder = state.folders.find(\r\n        folder => folder.id === action.payload.folderId\r\n      );\r\n      const currentTestCase = currentFolder.testCases.find(\r\n        testCase => testCase.id === action.payload.testCaseId\r\n      );\r\n      return {\r\n        ...state,\r\n        currentContext: {\r\n          ...state.currentContext,\r\n          type: \"testcase\",\r\n          name: `${currentFolder.name}/${currentTestCase.name}`,\r\n          folder: {\r\n            ...currentFolder\r\n          },\r\n          testCase: {\r\n            ...currentTestCase\r\n          }\r\n        }\r\n      };\r\n    }\r\n    case SELECT_FOLDER: {\r\n      const currentFolder = state.folders.find(\r\n        folder => folder.id === action.payload.folderId\r\n      );\r\n      return {\r\n        ...state,\r\n        currentContext: {\r\n          ...state.currentContext,\r\n          type: \"folder\",\r\n          name: currentFolder.name,\r\n          folder: {\r\n            ...currentFolder\r\n          }\r\n        }\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducer;\r\n","function reducer(\r\n  state = {\r\n    features: [\r\n      {\r\n        id: 1,\r\n        name: \"Open URL\",\r\n        inputRequired: true,\r\n        description: \"Opens URL in current tab\"\r\n      },\r\n      {\r\n        id: 2,\r\n        name: \"Wait for DOM element\",\r\n        inputRequired: true,\r\n        description: \"Wait for an element to be loaded in DOM\"\r\n      },\r\n      {\r\n        id: 3,\r\n        name: \"Screenshot\",\r\n        inputRequired: false,\r\n        description: \"Captures screenshot of current tab\"\r\n      },\r\n      {\r\n        id: 4,\r\n        name: \"Script\",\r\n        inputRequired: true,\r\n        multiline:true,\r\n        description: \"Executes the script in current context of the tab\"\r\n      },\r\n      {\r\n        id: 5,\r\n        name: \"Wait\",\r\n        inputRequired: true,\r\n        description: \"Wait for the mentioned mentioned time\"\r\n      }\r\n    ]\r\n  },\r\n  action\r\n) {\r\n  switch (action.type) {\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducer;\r\n","import { combineReducers } from \"redux\";\r\nimport sidenavReducer from \"./sidenav.reducer\";\r\nimport contextReducer from \"./context.reducer\";\r\n\r\nconst reducer = combineReducers({\r\n  sidenav: sidenavReducer,\r\n  features: contextReducer\r\n});\r\n\r\nexport default reducer;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport reducer from \"./reducers\";\r\nimport thunk from 'redux-thunk';\r\n\r\nconst middlewares = [thunk];\r\nconst configureStore = () => {\r\n  return createStore(reducer, applyMiddleware(...middlewares));\r\n};\r\n\r\nexport default configureStore;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport \"./faIconLibrary\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"./store\";\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}