{"version":3,"sources":["logo.svg","faIconLibrary.js","store/action-types/sidenav-action.type.js","store/actions/sidenav-action.js","components/sidenav/sidenav.jsx","components/topbar/topbar.jsx","components/testcase-compact/testcase-compact.jsx","components/step/step.jsx","components/testcase/testcase.jsx","components/content/content.jsx","App.jsx","serviceWorker.js","store/reducers/sidenav.reducer.js","store/reducers/context.reducer.js","store/reducers/index.js","store/index.js","index.js"],"names":["module","exports","__webpack_require__","p","library","add","faUser","faTimes","faBars","faPlus","faThList","faFolderPlus","faFolder","faFolderOpen","faCog","faVial","faPlay","faTrash","faEllipsisH","faPen","ADD_NEW_SIDENAV_FOLDER","REMOVE_SIDENAV_FOLDER","ADD_TEST_CASE","REMOVE_TEST_CASE","FOLDER_ICON_CLICK","RUN_TEST_CASE","RUN_TEST_CASE_COMPLETE","SELECT_FOLDER","SELECT_TEST_CASE","ADD_TEST_CASE_STEP","REMOVE_TEST_CASE_STEP","EDIT_TEST_CASE_STEP","UPDATE_TEST_CASE_STEP","EDIT_FOLDER_NAME","EDIT_TEST_CASE_NAME","SAVE_FOLDER_NAME","SAVE_TEST_CASE_NAME","removeSidenavFolder","payload","type","addTestCase","selectTestCase","Sidenav","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","setState","previousState","isExpanded","state","_this2","react_default","a","createElement","className","react_fontawesome_index_es","icon","onClick","onAddFolderClick","folders","map","folder","key","id","onFolderIconClick","folderId","open","event","preventDefault","onSelectFolder","editable","name","autoFocus","value","onBlur","onSaveFolderName","blur","folderName","target","onChange","onEditFolderName","onAddTestCase","onRemoveFolderClick","testCases","testCase","isRunning","class","onSelectTestCase","testCaseId","onRemoveTestCase","Component","connect","sidenav","dispatch","editFolderName","saveFolderName","folderIconClick","removeTestCase","selectFolder","Topbar","currentContext","onAddTestCaseStep","onRunTestCase","addTestCaseStep","Promise","resolve","setTimeout","runTestCase","TestCaseCompact","steps","length","Step","step","nameEditable","onUpdateTestCaseStep","stepId","delta","featureId","features","feature","find","inputRequired","multiline","data","cols","rows","updateTestCaseStep","TestCase","onSaveTestCaseName","testCaseName","onEditTestCaseName","components_step_step","editTestCaseName","saveTestCaseName","Content","testcase_compact_testcase_compact","testcase_testcase","App","topbar_topbar","sidenav_sidenav","content_content","Boolean","window","location","hostname","match","reducer","arguments","undefined","selected","testcase","action","objectSpread","concat","toConsumableArray","filter","newState","history","folderIndex","findIndex","testCaseIndex","stepIndex","currentFolder","currentTestCase","description","combineReducers","sidenavReducer","contextReducer","middlewares","thunk","store","createStore","applyMiddleware","apply","configureStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2eb74c99.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport {\r\n  faUser,\r\n  faTimes,\r\n  faBars,\r\n  faPlus,\r\n  faThList,\r\n  faFolderPlus,\r\n  faFolder,\r\n  faFolderOpen,\r\n  faVial,\r\n  faCog,\r\n  faPlay,\r\n  faTrash,\r\n  faEllipsisH,\r\n  faPen\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nlibrary.add(faUser);\r\nlibrary.add(faTimes);\r\nlibrary.add(faBars);\r\nlibrary.add(faPlus);\r\nlibrary.add(faThList);\r\nlibrary.add(faFolderPlus);\r\nlibrary.add(faFolder);\r\nlibrary.add(faFolderOpen);\r\nlibrary.add(faCog);\r\nlibrary.add(faVial);\r\nlibrary.add(faPlay);\r\nlibrary.add(faTrash);\r\nlibrary.add(faEllipsisH);\r\nlibrary.add(faPen);\r\n","export const ADD_NEW_SIDENAV_FOLDER = \"ADD_NEW_SIDENAV_FOLDER\";\r\nexport const REMOVE_SIDENAV_FOLDER = \"REMOVE_SIDENAV_FOLDER\";\r\nexport const ADD_TEST_CASE = \"ADD_TEST_CASE\";\r\nexport const REMOVE_TEST_CASE = \"REMOVE_TEST_CASE\";\r\nexport const FOLDER_ICON_CLICK = \"FOLDER_ICON_CLICK\";\r\nexport const RUN_TEST_CASE = \"RUN_TEST_CASE\";\r\nexport const RUN_TEST_CASE_COMPLETE = \"RUN_TEST_CASE_COMPLETE\";\r\nexport const RUN_ALL_TEST_CASES  = \"RUN_ALL_TEST_CASES\";\r\nexport const SELECT_FOLDER  = \"SELECT_FOLDER\";\r\nexport const SELECT_TEST_CASE  = \"SELECT_TEST_CASE\";\r\nexport const ADD_TEST_CASE_STEP  = \"ADD_TEST_CASE_STEP\";\r\nexport const REMOVE_TEST_CASE_STEP  = \"REMOVE_TEST_CASE_STEP\";\r\nexport const EDIT_TEST_CASE_STEP  = \"EDIT_TEST_CASE_STEP\";\r\nexport const UPDATE_TEST_CASE_STEP  = \"UPDATE_TEST_CASE_STEP\";\r\nexport const EDIT_FOLDER_NAME = \"EDIT_FOLDER_NAME\";\r\nexport const EDIT_TEST_CASE_NAME = \"EDIT_TEST_CASE_NAME\";\r\nexport const EDIT_TEST_CASE_STEP_NAME = \"EDIT_TEST_CASE_NAME\";\r\nexport const SAVE_FOLDER_NAME = \"SAVE_FOLDER_NAME\";\r\nexport const SAVE_TEST_CASE_NAME = \"SAVE_TEST_CASE_NAME\";\r\nexport const SAVE_TEST_CASE_STEP_NAME = \"SAVE_TEST_CASE_NAME\";\r\n\r\n","import {\r\n  ADD_NEW_SIDENAV_FOLDER,\r\n  REMOVE_SIDENAV_FOLDER,\r\n  ADD_TEST_CASE,\r\n  FOLDER_ICON_CLICK,\r\n  REMOVE_TEST_CASE,\r\n  SELECT_FOLDER,\r\n  SELECT_TEST_CASE,\r\n  ADD_TEST_CASE_STEP,\r\n  REMOVE_TEST_CASE_STEP,\r\n  EDIT_TEST_CASE_STEP,\r\n  UPDATE_TEST_CASE_STEP,\r\n  EDIT_TEST_CASE_NAME,\r\n  EDIT_FOLDER_NAME,\r\n  EDIT_TEST_CASE_STEP_NAME,\r\n  SAVE_TEST_CASE_NAME,\r\n  SAVE_FOLDER_NAME,\r\n  SAVE_TEST_CASE_STEP_NAME,\r\n  RUN_TEST_CASE,\r\n  RUN_TEST_CASE_COMPLETE\r\n} from \"../action-types/sidenav-action.type\";\r\n\r\nexport function addNewSidenavFolder(payload) {\r\n  return {\r\n    type: ADD_NEW_SIDENAV_FOLDER,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function removeSidenavFolder(payload) {\r\n  return {\r\n    type: REMOVE_SIDENAV_FOLDER,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function addTestCase(payload) {\r\n  return {\r\n    type: ADD_TEST_CASE,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function folderIconClick(payload) {\r\n  return {\r\n    type: FOLDER_ICON_CLICK,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function removeTestCase(payload) {\r\n  return {\r\n    type: REMOVE_TEST_CASE,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function selectTestCase(payload) {\r\n  return {\r\n    type: SELECT_TEST_CASE,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function selectFolder(payload) {\r\n  return {\r\n    type: SELECT_FOLDER,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function addTestCaseStep(payload) {\r\n  return {\r\n    type: ADD_TEST_CASE_STEP,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function removeTestCaseStep(payload) {\r\n  return {\r\n    type: REMOVE_TEST_CASE_STEP,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function editTestCaseStep(payload) {\r\n  return {\r\n    type: EDIT_TEST_CASE_STEP,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function updateTestCaseStep(payload) {\r\n  return {\r\n    type: UPDATE_TEST_CASE_STEP,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function editTestCaseName(payload) {\r\n  return {\r\n    type: EDIT_TEST_CASE_NAME,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function editFolderName(payload) {\r\n  return {\r\n    type: EDIT_FOLDER_NAME,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function editTestCaseStepName(payload) {\r\n  return {\r\n    type: EDIT_TEST_CASE_STEP_NAME,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function saveTestCaseName(payload) {\r\n  return {\r\n    type: SAVE_TEST_CASE_NAME,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function saveFolderName(payload) {\r\n  return {\r\n    type: SAVE_FOLDER_NAME,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function saveTestCaseStepName(payload) {\r\n  return {\r\n    type: SAVE_TEST_CASE_STEP_NAME,\r\n    payload\r\n  };\r\n}\r\n\r\nexport function runTestCase(payload) {\r\n  return dispatch => {\r\n    dispatch({\r\n      type: RUN_TEST_CASE,\r\n      payload\r\n    });\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        resolve();\r\n        dispatch({\r\n          type: RUN_TEST_CASE_COMPLETE,\r\n          payload\r\n        });\r\n      }, 2000);\r\n    });\r\n  };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./sidenav.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  addNewSidenavFolder,\r\n  removeSidenavFolder,\r\n  addTestCase,\r\n  folderIconClick,\r\n  removeTestCase,\r\n  selectFolder,\r\n  selectTestCase,\r\n  editFolderName,\r\n  saveFolderName\r\n} from \"../../store/actions/sidenav-action\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Sidenav extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { isExpanded: false };\r\n  }\r\n  toggle = () => {\r\n    this.setState((previousState, props) => {\r\n      return { isExpanded: !previousState.isExpanded };\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"sidenav-wrapper\">\r\n        {this.state.isExpanded && (\r\n          <FontAwesomeIcon icon=\"times\" onClick={this.toggle} />\r\n        )}\r\n        {!this.state.isExpanded && (\r\n          <FontAwesomeIcon icon=\"bars\" onClick={this.toggle} />\r\n        )}\r\n        {this.state.isExpanded && (\r\n          <div className=\"sidenav-content\">\r\n            <div className=\"sidenav-primary-toolbar\">\r\n              <FontAwesomeIcon\r\n                onClick={this.props.onAddFolderClick}\r\n                icon=\"folder-plus\"\r\n              />\r\n              <FontAwesomeIcon icon=\"th-list\" />\r\n            </div>\r\n            <div className=\"sidenav-folders\">\r\n              {this.props.folders.map(folder => {\r\n                return (\r\n                  <div className=\"sidenav-folder-wrapper\" key={folder.id}>\r\n                    <div className=\"folder-header\">\r\n                      <div\r\n                        onClick={() =>\r\n                          this.props.onFolderIconClick({ folderId: folder.id })\r\n                        }\r\n                      >\r\n                        {folder.open && <FontAwesomeIcon icon=\"folder-open\" />}\r\n                        {!folder.open && <FontAwesomeIcon icon=\"folder\" />}\r\n                      </div>\r\n                      <span\r\n                        className=\"folder-name\"\r\n                        onClick={event => {\r\n                          event.preventDefault();\r\n                          this.props.onSelectFolder({ folderId: folder.id });\r\n                        }}\r\n                      >\r\n                        {\" \"}\r\n                        {!folder.editable && folder.name}\r\n                        {folder.editable && (\r\n                          <input\r\n                            type=\"text\"\r\n                            autoFocus=\"true\"\r\n                            value={folder.name}\r\n                            onClick={event => {\r\n                              event.preventDefault();\r\n                            }}\r\n                            onBlur={event => {\r\n                              event.preventDefault();\r\n                              this.props.onSaveFolderName({\r\n                                folderId: folder.id,\r\n                                blur: true,\r\n                                folderName: event.target.value\r\n                              });\r\n                            }}\r\n                            onChange={event => {\r\n                              event.preventDefault();\r\n                              this.props.onSaveFolderName({\r\n                                folderId: folder.id,\r\n                                folderName: event.target.value\r\n                              });\r\n                            }}\r\n                          />\r\n                        )}\r\n                        {!folder.editable && (\r\n                          <FontAwesomeIcon\r\n                            icon=\"pen\"\r\n                            onClick={() =>\r\n                              this.props.onEditFolderName({\r\n                                folderId: folder.id\r\n                              })\r\n                            }\r\n                          />\r\n                        )}\r\n                      </span>\r\n                      <div className=\"folder-options-wrapper\">\r\n                        <FontAwesomeIcon icon=\"ellipsis-h\" />\r\n                        <div className=\"folder-options\">\r\n                          <div\r\n                            onClick={() =>\r\n                              this.props.onAddTestCase({ folderId: folder.id })\r\n                            }\r\n                          >\r\n                            <FontAwesomeIcon icon=\"plus\" />\r\n                          </div>\r\n                          <div\r\n                            onClick={() =>\r\n                              this.props.onRemoveFolderClick({\r\n                                folderId: folder.id\r\n                              })\r\n                            }\r\n                          >\r\n                            <FontAwesomeIcon icon=\"trash\" />\r\n                          </div>\r\n                          <div>\r\n                            <FontAwesomeIcon icon=\"play\" />\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"folder-content\">\r\n                      {folder.open &&\r\n                        folder.testCases.map(testCase => {\r\n                          return (\r\n                            <div className=\"test-case\">\r\n                              <FontAwesomeIcon icon=\"vial\" />\r\n                              {testCase.isRunning && <div class=\"loading\" />}\r\n                              <span\r\n                                className={\r\n                                  testCase.isRunning\r\n                                    ? \"test-case-name running\"\r\n                                    : \"test-case-name\"\r\n                                }\r\n                                onClick={() =>\r\n                                  this.props.onSelectTestCase({\r\n                                    folderId: folder.id,\r\n                                    testCaseId: testCase.id\r\n                                  })\r\n                                }\r\n                              >\r\n                                {testCase.name}\r\n                              </span>\r\n                              <div className=\"test-case-options-wrapper\">\r\n                                <FontAwesomeIcon icon=\"ellipsis-h\" />\r\n                                <div className=\"test-case-options\">\r\n                                  <div\r\n                                    onClick={() =>\r\n                                      this.props.onRemoveTestCase({\r\n                                        folderId: folder.id,\r\n                                        testCaseId: testCase.id\r\n                                      })\r\n                                    }\r\n                                  >\r\n                                    <FontAwesomeIcon icon=\"trash\" />\r\n                                  </div>\r\n                                  <div>\r\n                                    <FontAwesomeIcon icon=\"play\" />\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          );\r\n                        })}\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onAddFolderClick: () => {\r\n      dispatch(addNewSidenavFolder());\r\n    },\r\n    onRemoveFolderClick: payload => {\r\n      dispatch(removeSidenavFolder(payload));\r\n    },\r\n    onEditFolderName: payload => {\r\n      dispatch(editFolderName(payload));\r\n    },\r\n    onSaveFolderName: payload => {\r\n      dispatch(saveFolderName(payload));\r\n    },\r\n    onAddTestCase: payload => {\r\n      dispatch(addTestCase(payload));\r\n    },\r\n    onFolderIconClick: payload => {\r\n      dispatch(folderIconClick(payload));\r\n    },\r\n    onRemoveTestCase: payload => {\r\n      dispatch(removeTestCase(payload));\r\n    },\r\n    onSelectFolder: payload => {\r\n      dispatch(selectFolder(payload));\r\n    },\r\n    onSelectTestCase: payload => {\r\n      dispatch(selectTestCase(payload));\r\n    }\r\n  };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    folders: state.sidenav.folders\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Sidenav);\r\n","import React, { Component } from \"react\";\r\nimport \"./topbar.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  removeSidenavFolder,\r\n  addTestCase,\r\n  removeTestCase,\r\n  runTestCase,\r\n  addTestCaseStep\r\n} from \"../../store/actions/sidenav-action\";\r\n\r\nclass Topbar extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"top-bar-wrapper\">\r\n        <div className=\"menu\" />\r\n        <div className=\"current-selection\">\r\n          {this.props.currentContext.type === \"folder\" && (\r\n            <FontAwesomeIcon icon=\"folder\" />\r\n          )}\r\n          {this.props.currentContext.type === \"testcase\" && (\r\n            <FontAwesomeIcon icon=\"vial\" />\r\n          )}\r\n          <span>{this.props.currentContext.name}</span>\r\n        </div>\r\n        <div className=\"tools\">\r\n          {this.props.currentContext.type === \"folder\" && (\r\n            <div className=\"tools-options-container\">\r\n              <div\r\n                onClick={() =>\r\n                  this.props.onAddTestCase({\r\n                    folderId: this.props.currentContext.folder.id\r\n                  })\r\n                }\r\n              >\r\n                <FontAwesomeIcon icon=\"plus\" />\r\n              </div>\r\n              <div\r\n                onClick={() =>\r\n                  this.props.onRemoveFolderClick({\r\n                    folderId: this.props.currentContext.folder.id\r\n                  })\r\n                }\r\n              >\r\n                <FontAwesomeIcon icon=\"trash\" />\r\n              </div>\r\n              <div>\r\n                <FontAwesomeIcon icon=\"play\" />\r\n              </div>\r\n            </div>\r\n          )}\r\n          {this.props.currentContext.type === \"testcase\" && (\r\n            <div className=\"tools-options-container\">\r\n              <div\r\n                onClick={() =>\r\n                  this.props.onAddTestCaseStep({\r\n                    folderId: this.props.currentContext.folder.id,\r\n                    testCaseId: this.props.currentContext.testCase.id\r\n                  })\r\n                }\r\n              >\r\n                <FontAwesomeIcon icon=\"plus\" />\r\n              </div>\r\n              <div\r\n                onClick={() =>\r\n                  this.props.onRunTestCase({\r\n                    folderId: this.props.currentContext.folder.id,\r\n                    testCaseId: this.props.currentContext.testCase.id\r\n                  })\r\n                }\r\n              >\r\n                <FontAwesomeIcon icon=\"play\" />\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className=\"user-info\">\r\n          <FontAwesomeIcon icon=\"user\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onRemoveFolderClick: payload => {\r\n      dispatch(removeSidenavFolder(payload));\r\n    },\r\n    onAddTestCase: payload => {\r\n      dispatch(addTestCase(payload));\r\n    },\r\n    onAddTestCaseStep: payload => {\r\n      dispatch(addTestCaseStep(payload));\r\n    },\r\n    onRunTestCase: payload => {\r\n      dispatch(runTestCase(payload));\r\n    }\r\n  };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    currentContext: state.sidenav.currentContext\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Topbar);\r\n","import React, { Component } from \"react\";\r\nimport \"./testcase-compact.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { selectTestCase } from \"../../store/actions/sidenav-action\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass TestCaseCompact extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"test-case-compact-wrapper\">\r\n        <div className=\"test-case-compact-header\">\r\n          <span\r\n            className=\"test-case-name\"\r\n            onClick={() =>\r\n              this.props.onSelectTestCase({\r\n                folderId: this.props.folderId,\r\n                testCaseId: this.props.testCase.id\r\n              })\r\n            }\r\n          >\r\n            {this.props.testCase.name}\r\n          </span>\r\n        </div>\r\n        <div className=\"test-case-compact-steps\">\r\n          {!this.props.testCase.steps.length && (\r\n            <span> No Step Added Yet </span>\r\n          )}\r\n        </div>\r\n        <div className=\"test-case-compact-historical\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSelectTestCase: payload => {\r\n      dispatch(selectTestCase(payload));\r\n    }\r\n  };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {};\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TestCaseCompact);\r\n","import React, { Component } from \"react\";\r\nimport \"./step.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { connect } from \"react-redux\";\r\nimport { updateTestCaseStep } from \"../../store/actions/sidenav-action\";\r\n\r\nclass Step extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"step-wrapper\">\r\n        <div className=\"step-header\">          \r\n          {!this.props.step.nameEditable && this.props.step.name}\r\n          {this.props.step.nameEditable && (\r\n            <input\r\n              type=\"text\"\r\n              autoFocus=\"true\"\r\n              value={this.props.step.name}\r\n              onClick={event => {\r\n                event.preventDefault();\r\n              }}\r\n              onBlur={event => {\r\n                event.preventDefault();\r\n                this.props.onUpdateTestCaseStep({\r\n                  folderId: this.props.folderId,\r\n                  testCaseId: this.props.testCaseId,\r\n                  stepId: this.props.step.id,\r\n                  delta: {\r\n                    name: event.target.value,\r\n                    nameEditable: false\r\n                  }\r\n                });\r\n              }}\r\n              onChange={event => {\r\n                event.preventDefault();\r\n                this.props.onUpdateTestCaseStep({\r\n                  folderId: this.props.folderId,\r\n                  testCaseId: this.props.testCaseId,\r\n                  stepId: this.props.step.id,\r\n                  delta: {\r\n                    name: event.target.value\r\n                  }\r\n                });\r\n              }}\r\n            />\r\n          )}\r\n          {!this.props.step.nameEditable && (\r\n            <FontAwesomeIcon\r\n              icon=\"pen\"\r\n              onClick={event => {\r\n                this.props.onUpdateTestCaseStep({\r\n                  folderId: this.props.folderId,\r\n                  testCaseId: this.props.testCaseId,\r\n                  stepId: this.props.step.id,\r\n                  delta: {\r\n                    nameEditable: true\r\n                  }\r\n                });\r\n              }}\r\n            />\r\n          )}\r\n        </div>\r\n        <div className=\"step-type\">\r\n          <div className=\"step-type-options  blue semi-square\">\r\n            <select\r\n              name=\"step-type-options\"\r\n              onChange={event =>\r\n                this.props.onUpdateTestCaseStep({\r\n                  folderId: this.props.folderId,\r\n                  testCaseId: this.props.testCaseId,\r\n                  stepId: this.props.step.id,\r\n                  delta: {\r\n                    featureId: event.target.value\r\n                  }\r\n                })\r\n              }\r\n              value={this.props.step.featureId}\r\n            >\r\n              {this.props.features.map(feature => {\r\n                return <option value={feature.id}>{feature.name}</option>;\r\n              })}\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div className=\"step-data\">\r\n          {this.props.features.find(\r\n            feature => feature.id == this.props.step.featureId\r\n          ).inputRequired &&\r\n            !this.props.features.find(\r\n              feature => feature.id == this.props.step.featureId\r\n            ).multiline && (\r\n              <input\r\n                type=\"text\"\r\n                value={this.props.step.data}\r\n                onChange={event =>\r\n                  this.props.onUpdateTestCaseStep({\r\n                    folderId: this.props.folderId,\r\n                    testCaseId: this.props.testCaseId,\r\n                    stepId: this.props.step.id,\r\n                    delta: {\r\n                      data: event.target.value\r\n                    }\r\n                  })\r\n                }\r\n              />\r\n            )}\r\n          {this.props.features.find(\r\n            feature => feature.id == this.props.step.featureId\r\n          ).inputRequired &&\r\n            this.props.features.find(\r\n              feature => feature.id == this.props.step.featureId\r\n            ).multiline && (\r\n              <textarea\r\n                cols=\"50\"\r\n                rows=\"20\"\r\n                value={this.props.step.data}\r\n                onChange={event =>\r\n                  this.props.onUpdateTestCaseStep({\r\n                    folderId: this.props.folderId,\r\n                    testCaseId: this.props.testCaseId,\r\n                    stepId: this.props.step.id,\r\n                    delta: {\r\n                      data: event.target.value\r\n                    }\r\n                  })\r\n                }\r\n              />\r\n            )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onUpdateTestCaseStep: payload => dispatch(updateTestCaseStep(payload))\r\n  };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    features: state.features.features\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Step);\r\n","import React, { Component } from \"react\";\r\nimport \"./testcase.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  selectTestCase,\r\n  editTestCaseName,\r\n  saveTestCaseName\r\n} from \"../../store/actions/sidenav-action\";\r\nimport { connect } from \"react-redux\";\r\nimport Step from \"../step/step\";\r\n\r\nclass TestCase extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"test-case-wrapper\">\r\n        <div className=\"test-case-header\">\r\n          {!this.props.testCase.nameEditable && this.props.testCase.name}\r\n          {this.props.testCase.nameEditable && (\r\n            <input\r\n              type=\"text\"\r\n              autoFocus=\"true\"\r\n              value={this.props.testCase.name}\r\n              onClick={event => {\r\n                event.preventDefault();\r\n              }}\r\n              onBlur={event => {\r\n                event.preventDefault();\r\n                this.props.onSaveTestCaseName({\r\n                  folderId: this.props.folderId,\r\n                  testCaseId: this.props.testCase.id,\r\n                  blur: true,\r\n                  testCaseName: event.target.value\r\n                });\r\n              }}\r\n              onChange={event => {\r\n                event.preventDefault();\r\n                this.props.onSaveTestCaseName({\r\n                  folderId: this.props.folderId,\r\n                  testCaseId: this.props.testCase.id,\r\n                  testCaseName: event.target.value\r\n                });\r\n              }}\r\n            />\r\n          )}\r\n          {!this.props.testCase.nameEditable && (\r\n            <FontAwesomeIcon\r\n              icon=\"pen\"\r\n              onClick={() =>\r\n                this.props.onEditTestCaseName({\r\n                  folderId: this.props.folderId,\r\n                  testCaseId: this.props.testCase.id\r\n                })\r\n              }\r\n            />\r\n          )}\r\n        </div>\r\n        <div className=\"test-case-steps\">\r\n          {this.props.testCase.steps.map(step => {\r\n            return (\r\n              <div key={step.id}>\r\n                <Step\r\n                  step={step}\r\n                  folderId={this.props.folderId}\r\n                  testCaseId={this.props.testCase.id}\r\n                />\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSelectTestCase: payload => {\r\n      dispatch(selectTestCase(payload));\r\n    },\r\n    onEditTestCaseName: payload => {\r\n      dispatch(editTestCaseName(payload));\r\n    },\r\n    onSaveTestCaseName: payload => {\r\n      dispatch(saveTestCaseName(payload));\r\n    }\r\n  };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {};\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TestCase);\r\n","import React, { Component } from \"react\";\r\nimport \"./content.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {} from \"../../store/actions/sidenav-action\";\r\nimport { connect } from \"react-redux\";\r\nimport TestCaseCompact from \"../testcase-compact/testcase-compact\";\r\nimport TestCase from \"../testcase/testcase\";\r\n\r\nclass Content extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App-content\">\r\n        {this.props.currentContext.type === \"folder\" &&\r\n          this.props.currentContext.folder.testCases.map(testCase => {\r\n            return (\r\n              <TestCaseCompact\r\n                folderId={this.props.currentContext.folder.id}\r\n                testCase={testCase}\r\n                key={testCase.id}\r\n              />\r\n            );\r\n          })}\r\n        {this.props.currentContext.type === \"testcase\" && (\r\n          <TestCase\r\n            folderId={this.props.currentContext.folder.id}\r\n            testCase={this.props.currentContext.testCase}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n  return {};\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    currentContext: state.sidenav.currentContext\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Content);\r\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Sidenav from \"./components/sidenav/sidenav\";\nimport Topbar from \"./components/topbar/topbar\";\nimport Content from \"./components/content/content\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Topbar />\n        <Sidenav />\n        <Content />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n  ADD_NEW_SIDENAV_FOLDER,\r\n  REMOVE_SIDENAV_FOLDER,\r\n  ADD_TEST_CASE,\r\n  FOLDER_ICON_CLICK,\r\n  REMOVE_TEST_CASE,\r\n  SELECT_TEST_CASE,\r\n  SELECT_FOLDER,\r\n  ADD_TEST_CASE_STEP,\r\n  REMOVE_TEST_CASE_STEP,\r\n  EDIT_TEST_CASE_STEP,\r\n  UPDATE_TEST_CASE_STEP,\r\n  EDIT_FOLDER_NAME,\r\n  SAVE_FOLDER_NAME,\r\n  EDIT_TEST_CASE_NAME,\r\n  SAVE_TEST_CASE_NAME,\r\n  RUN_TEST_CASE,\r\n  RUN_TEST_CASE_COMPLETE\r\n} from \"../action-types/sidenav-action.type\";\r\n\r\nfunction reducer(\r\n  state = {\r\n    folders: [],\r\n    selected: {},\r\n    currentContext: {\r\n      type: \"none\",\r\n      name: \"\",\r\n      folder: {},\r\n      testcase: null\r\n    }\r\n  },\r\n  action\r\n) {\r\n  switch (action.type) {\r\n    case ADD_NEW_SIDENAV_FOLDER:\r\n      return {\r\n        ...state,\r\n        folders: state.folders.concat({\r\n          id: `__folder_${state.folders.length + 1}`,\r\n          name: `Folder ${state.folders.length + 1}`,\r\n          open: false,\r\n          testCases: []\r\n        })\r\n      };\r\n    case REMOVE_SIDENAV_FOLDER:\r\n      return {\r\n        ...state,\r\n        folders: [\r\n          ...state.folders.filter(\r\n            folder => folder.id !== action.payload.folderId\r\n          )\r\n        ]\r\n      };\r\n    case EDIT_FOLDER_NAME: {\r\n      return {\r\n        ...state,\r\n        folders: state.folders.map(folder => {\r\n          if (folder.id === action.payload.folderId) {\r\n            folder.editable = true;\r\n          }\r\n          return folder;\r\n        })\r\n      };\r\n    }\r\n    case SAVE_FOLDER_NAME: {\r\n      return {\r\n        ...state,\r\n        folders: state.folders.map(folder => {\r\n          if (folder.id === action.payload.folderId) {\r\n            folder.editable = !action.payload.blur;\r\n            folder.name = action.payload.folderName;\r\n          }\r\n          return folder;\r\n        })\r\n      };\r\n    }\r\n    case ADD_TEST_CASE: {\r\n      let newState = {\r\n        ...state,\r\n        folders: state.folders.map(folder => {\r\n          if (folder.id === action.payload.folderId) {\r\n            folder.testCases = folder.testCases.concat({\r\n              id: `${folder.id}_testcase_${folder.testCases.length + 1}`,\r\n              name: `Test Case ${folder.testCases.length + 1}`,\r\n              steps: [],\r\n              history: []\r\n            });\r\n            folder.open = true;\r\n          }\r\n          return folder;\r\n        })\r\n      };\r\n      if (state.currentContext.folder.id === action.payload.folderId) {\r\n        newState = {\r\n          ...newState,\r\n          currentContext: {\r\n            ...newState.currentContext,\r\n            folder: {\r\n              ...newState.folders.find(\r\n                folder => folder.id === action.payload.folderId\r\n              )\r\n            }\r\n          }\r\n        };\r\n      }\r\n      return newState;\r\n    }\r\n    case ADD_TEST_CASE_STEP: {\r\n      const folderIndex = state.folders.findIndex(\r\n        folder => folder.id === action.payload.folderId\r\n      );\r\n      const testCaseIndex = state.folders[folderIndex].testCases.findIndex(\r\n        testCase => testCase.id === action.payload.testCaseId\r\n      );\r\n      state.folders[folderIndex].testCases[testCaseIndex].steps = [\r\n        ...state.folders[folderIndex].testCases[testCaseIndex].steps,\r\n        {\r\n          id: `${state.folders[folderIndex].id}_testcase_${\r\n            state.folders[folderIndex].testCases[testCaseIndex].id\r\n          }_step_${state.folders[folderIndex].testCases[testCaseIndex].steps\r\n            .length + 1}`,\r\n          name: `Step ${state.folders[folderIndex].testCases[testCaseIndex]\r\n            .steps.length + 1}`,\r\n          featureId: 1,\r\n          data: \"\"\r\n        }\r\n      ];\r\n      state.folders[folderIndex].testCases = [\r\n        ...state.folders[folderIndex].testCases\r\n      ];\r\n      return {\r\n        ...state,\r\n        folders: [...state.folders],\r\n        currentContext: {\r\n          ...state.currentContext,\r\n          testCase: {\r\n            ...state.folders[folderIndex].testCases[testCaseIndex]\r\n          }\r\n        }\r\n      };\r\n    }\r\n    case EDIT_TEST_CASE_NAME: {\r\n      const folderIndex = state.folders.findIndex(\r\n        folder => folder.id === action.payload.folderId\r\n      );\r\n      const testCaseIndex = state.folders[folderIndex].testCases.findIndex(\r\n        testCase => testCase.id === action.payload.testCaseId\r\n      );\r\n      state.folders[folderIndex].testCases[testCaseIndex] = {\r\n        ...state.folders[folderIndex].testCases[testCaseIndex],\r\n        nameEditable: true\r\n      };\r\n      state.folders[folderIndex].testCases = [\r\n        ...state.folders[folderIndex].testCases\r\n      ];\r\n      return {\r\n        ...state,\r\n        folders: [...state.folders],\r\n        currentContext: {\r\n          ...state.currentContext,\r\n          testCase: {\r\n            ...state.folders[folderIndex].testCases[testCaseIndex]\r\n          }\r\n        }\r\n      };\r\n    }\r\n    case SAVE_TEST_CASE_NAME: {\r\n      const folderIndex = state.folders.findIndex(\r\n        folder => folder.id === action.payload.folderId\r\n      );\r\n      const testCaseIndex = state.folders[folderIndex].testCases.findIndex(\r\n        testCase => testCase.id === action.payload.testCaseId\r\n      );\r\n      state.folders[folderIndex].testCases[testCaseIndex] = {\r\n        ...state.folders[folderIndex].testCases[testCaseIndex],\r\n        nameEditable: !action.payload.blur,\r\n        name: action.payload.testCaseName\r\n      };\r\n      state.folders[folderIndex].testCases = [\r\n        ...state.folders[folderIndex].testCases\r\n      ];\r\n      return {\r\n        ...state,\r\n        folders: [...state.folders],\r\n        currentContext: {\r\n          ...state.currentContext,\r\n          testCase: {\r\n            ...state.folders[folderIndex].testCases[testCaseIndex]\r\n          },\r\n          name: `${state.folders[folderIndex].name}/${\r\n            state.folders[folderIndex].testCases[testCaseIndex].name\r\n          }`\r\n        }\r\n      };\r\n    }\r\n    case RUN_TEST_CASE: {\r\n      const folderIndex = state.folders.findIndex(\r\n        folder => folder.id === action.payload.folderId\r\n      );\r\n      const testCaseIndex = state.folders[folderIndex].testCases.findIndex(\r\n        testCase => testCase.id === action.payload.testCaseId\r\n      );\r\n      state.folders[folderIndex].testCases[testCaseIndex] = {\r\n        ...state.folders[folderIndex].testCases[testCaseIndex],\r\n        isRunning: true\r\n      };\r\n      state.folders[folderIndex].testCases = [\r\n        ...state.folders[folderIndex].testCases\r\n      ];\r\n      return {\r\n        ...state,\r\n        folders: [...state.folders],\r\n        currentContext: {\r\n          ...state.currentContext,\r\n          testCase: {\r\n            ...state.folders[folderIndex].testCases[testCaseIndex]\r\n          }\r\n        }\r\n      };\r\n    }\r\n    case RUN_TEST_CASE_COMPLETE: {\r\n      const folderIndex = state.folders.findIndex(\r\n        folder => folder.id === action.payload.folderId\r\n      );\r\n      const testCaseIndex = state.folders[folderIndex].testCases.findIndex(\r\n        testCase => testCase.id === action.payload.testCaseId\r\n      );\r\n      state.folders[folderIndex].testCases[testCaseIndex] = {\r\n        ...state.folders[folderIndex].testCases[testCaseIndex],\r\n        isRunning: false\r\n      };\r\n      state.folders[folderIndex].testCases = [\r\n        ...state.folders[folderIndex].testCases\r\n      ];\r\n      return {\r\n        ...state,\r\n        folders: [...state.folders],\r\n        currentContext: {\r\n          ...state.currentContext,\r\n          testCase: {\r\n            ...state.folders[folderIndex].testCases[testCaseIndex]\r\n          }\r\n        }\r\n      };\r\n    }\r\n    case UPDATE_TEST_CASE_STEP: {\r\n      const folderIndex = state.folders.findIndex(\r\n        folder => folder.id === action.payload.folderId\r\n      );\r\n      const testCaseIndex = state.folders[folderIndex].testCases.findIndex(\r\n        testCase => testCase.id === action.payload.testCaseId\r\n      );\r\n      const stepIndex = state.folders[folderIndex].testCases[\r\n        testCaseIndex\r\n      ].steps.findIndex(step => step.id === action.payload.stepId);\r\n      state.folders[folderIndex].testCases[testCaseIndex].steps[stepIndex] = {\r\n        ...state.folders[folderIndex].testCases[testCaseIndex].steps[stepIndex],\r\n        ...action.payload.delta\r\n      };\r\n\r\n      state.folders[folderIndex].testCases = [\r\n        ...state.folders[folderIndex].testCases\r\n      ];\r\n      state.folders[folderIndex].testCases[testCaseIndex].steps = [\r\n        ...state.folders[folderIndex].testCases[testCaseIndex].steps\r\n      ];\r\n      state.folders[folderIndex].testCases = [\r\n        ...state.folders[folderIndex].testCases\r\n      ];\r\n      return {\r\n        ...state,\r\n        folders: [...state.folders],\r\n        currentContext: {\r\n          ...state.currentContext,\r\n          testCase: {\r\n            ...state.folders[folderIndex].testCases[testCaseIndex]\r\n          }\r\n        }\r\n      };\r\n    }\r\n    case REMOVE_TEST_CASE_STEP: {\r\n      return state;\r\n    }\r\n    case EDIT_TEST_CASE_STEP: {\r\n      return state;\r\n    }\r\n    case FOLDER_ICON_CLICK: {\r\n      return {\r\n        ...state,\r\n        folders: state.folders.map(folder => {\r\n          if (folder.id === action.payload.folderId) {\r\n            folder.open = !folder.open;\r\n          }\r\n          return folder;\r\n        })\r\n      };\r\n    }\r\n    case REMOVE_TEST_CASE: {\r\n      let newState = {\r\n        ...state,\r\n        folders: state.folders.map(folder => {\r\n          if (folder.id === action.payload.folderId) {\r\n            folder.testCases = folder.testCases.filter(\r\n              testCase => testCase.id !== action.payload.testCaseId\r\n            );\r\n          }\r\n          return folder;\r\n        })\r\n      };\r\n      if (state.currentContext.folder.id === action.payload.folderId) {\r\n        newState = {\r\n          ...newState,\r\n          currentContext: {\r\n            ...newState.currentContext,\r\n            folder: {\r\n              ...newState.folders.find(\r\n                folder => folder.id === action.payload.folderId\r\n              )\r\n            }\r\n          }\r\n        };\r\n      }\r\n      return newState;\r\n    }\r\n    case SELECT_TEST_CASE: {\r\n      const currentFolder = state.folders.find(\r\n        folder => folder.id === action.payload.folderId\r\n      );\r\n      const currentTestCase = currentFolder.testCases.find(\r\n        testCase => testCase.id === action.payload.testCaseId\r\n      );\r\n      return {\r\n        ...state,\r\n        currentContext: {\r\n          ...state.currentContext,\r\n          type: \"testcase\",\r\n          name: `${currentFolder.name}/${currentTestCase.name}`,\r\n          folder: {\r\n            ...currentFolder\r\n          },\r\n          testCase: {\r\n            ...currentTestCase\r\n          }\r\n        }\r\n      };\r\n    }\r\n    case SELECT_FOLDER: {\r\n      const currentFolder = state.folders.find(\r\n        folder => folder.id === action.payload.folderId\r\n      );\r\n      return {\r\n        ...state,\r\n        currentContext: {\r\n          ...state.currentContext,\r\n          type: \"folder\",\r\n          name: currentFolder.name,\r\n          folder: {\r\n            ...currentFolder\r\n          }\r\n        }\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducer;\r\n","function reducer(\r\n  state = {\r\n    features: [\r\n      {\r\n        id: 1,\r\n        name: \"Open URL\",\r\n        inputRequired: true,\r\n        description: \"Opens URL in current tab\"\r\n      },\r\n      {\r\n        id: 2,\r\n        name: \"Wait for DOM element\",\r\n        inputRequired: true,\r\n        description: \"Wait for an element to be loaded in DOM\"\r\n      },\r\n      {\r\n        id: 3,\r\n        name: \"Screenshot\",\r\n        inputRequired: false,\r\n        description: \"Captures screenshot of current tab\"\r\n      },\r\n      {\r\n        id: 4,\r\n        name: \"Script\",\r\n        inputRequired: true,\r\n        multiline:true,\r\n        description: \"Executes the script in current context of the tab\"\r\n      },\r\n      {\r\n        id: 5,\r\n        name: \"Wait\",\r\n        inputRequired: true,\r\n        description: \"Wait for the mentioned mentioned time\"\r\n      }\r\n    ]\r\n  },\r\n  action\r\n) {\r\n  switch (action.type) {\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducer;\r\n","import { combineReducers } from \"redux\";\r\nimport sidenavReducer from \"./sidenav.reducer\";\r\nimport contextReducer from \"./context.reducer\";\r\n\r\nconst reducer = combineReducers({\r\n  sidenav: sidenavReducer,\r\n  features: contextReducer\r\n});\r\n\r\nexport default reducer;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport reducer from \"./reducers\";\r\nimport thunk from 'redux-thunk';\r\n\r\nconst middlewares = [thunk];\r\nconst configureStore = () => {\r\n  return createStore(reducer, applyMiddleware(...middlewares));\r\n};\r\n\r\nexport default configureStore;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport \"./faIconLibrary\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"./store\";\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}